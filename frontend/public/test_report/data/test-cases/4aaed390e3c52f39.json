{"uid":"4aaed390e3c52f39","name":"查询门票详细信息","fullName":"InterfaceAutoTestWithPytest.test_case.test_ticket_module.TestTicketModule#test_detail_create","historyId":"5fada885b28d609a45712246379ac725","time":{"start":1687275548455,"stop":1687275548501,"duration":46},"description":"通过接口获取详细信息","descriptionHtml":"<p>通过接口获取详细信息</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_case.test_ticket_module.TestTicketModule object at 0x00000215A53B0520>\ncase_data = [1.0, '查询不存在用户的门票详细信息', 'http://127.0.0.1:8001', '/users/1239192312/tickets/1/', 'get', '', ...]\n\n    @allure.story(\"查询门票功能\")\n    @allure.title('查询门票详细信息')  # 指定测试用例标题，默认是函数名\n    @allure.description('通过接口获取详细信息')  # 添加测试用例描述\n    @allure.severity(allure.severity_level.CRITICAL)  # 阻塞级别\n    @pytest.mark.run(order=3)   # 执行顺序\n    @pytest.mark.parametrize('case_data', detail_test_data)\n    def test_detail_create(self, case_data):\n        with allure.step(\"读取请求数据，调用接口\"):\n            logging.info(\"接口用例数据：%s\" % case_data)\n            response = api_request(case_data[API_IP], case_data[API_URI], case_data[REQUEST_METHOD],\n                                   case_data[API_REQUEST_DATA], case_data[RESPONSE_EXTRACT_VAR],\n                                   case_data[REQUEST_HEADER], case_data[REQUEST_COOKIE])\n        with allure.step(\"获取响应数据，进行断言\"):\n>           assert_keyword(response, case_data[RESPONSE_ASSERT_KEYWORD])\n\ntest_case\\test_ticket_module.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, keyword = '\"status\":\"error\"'\n\n    def assert_keyword(response, keyword):\n        keyword_list = keyword.split(\"|\")\n        for keyword in keyword_list:\n            keyword=keyword.replace(\" \",\"\")\n            try:\n>               assert keyword.strip() in response.text\nE               AssertionError\n\nutil\\assert_util.py:11: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"通过接口获取详细信息","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_case.test_ticket_module.TestTicketModule object at 0x00000215A53B0520>\ncase_data = [1.0, '查询不存在用户的门票详细信息', 'http://127.0.0.1:8001', '/users/1239192312/tickets/1/', 'get', '', ...]\n\n    @allure.story(\"查询门票功能\")\n    @allure.title('查询门票详细信息')  # 指定测试用例标题，默认是函数名\n    @allure.description('通过接口获取详细信息')  # 添加测试用例描述\n    @allure.severity(allure.severity_level.CRITICAL)  # 阻塞级别\n    @pytest.mark.run(order=3)   # 执行顺序\n    @pytest.mark.parametrize('case_data', detail_test_data)\n    def test_detail_create(self, case_data):\n        with allure.step(\"读取请求数据，调用接口\"):\n            logging.info(\"接口用例数据：%s\" % case_data)\n            response = api_request(case_data[API_IP], case_data[API_URI], case_data[REQUEST_METHOD],\n                                   case_data[API_REQUEST_DATA], case_data[RESPONSE_EXTRACT_VAR],\n                                   case_data[REQUEST_HEADER], case_data[REQUEST_COOKIE])\n        with allure.step(\"获取响应数据，进行断言\"):\n>           assert_keyword(response, case_data[RESPONSE_ASSERT_KEYWORD])\n\ntest_case\\test_ticket_module.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, keyword = '\"status\":\"error\"'\n\n    def assert_keyword(response, keyword):\n        keyword_list = keyword.split(\"|\")\n        for keyword in keyword_list:\n            keyword=keyword.replace(\" \",\"\")\n            try:\n>               assert keyword.strip() in response.text\nE               AssertionError\n\nutil\\assert_util.py:11: AssertionError","steps":[{"name":"读取请求数据，调用接口","time":{"start":1687275548455,"stop":1687275548498,"duration":43},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"获取响应数据，进行断言","time":{"start":1687275548498,"stop":1687275548500,"duration":2},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"D:\\repo\\23_Spring_software_testing\\InterfaceAutoTestWithPytest\\test_case\\test_ticket_module.py\", line 69, in test_detail_create\n    assert_keyword(response, case_data[RESPONSE_ASSERT_KEYWORD])\n  File \"D:\\repo\\23_Spring_software_testing\\InterfaceAutoTestWithPytest\\util\\assert_util.py\", line 11, in assert_keyword\n    assert keyword.strip() in response.text\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"hasContent":true}],"attachments":[{"uid":"abfc261836e6d5ab","name":"log","source":"abfc261836e6d5ab.txt","type":"text/plain","size":2421}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"stepsCount":2,"hasContent":true},"afterStages":[],"labels":[{"name":"story","value":"查询门票功能"},{"name":"severity","value":"critical"},{"name":"feature","value":"票务模块"},{"name":"tag","value":"run(order=3)"},{"name":"parentSuite","value":"InterfaceAutoTestWithPytest.test_case"},{"name":"suite","value":"test_ticket_module"},{"name":"subSuite","value":"TestTicketModule"},{"name":"host","value":"LAPTOP-TK5KLJFB"},{"name":"thread","value":"13228-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"InterfaceAutoTestWithPytest.test_case.test_ticket_module"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case_data","value":"[1.0, '查询不存在用户的门票详细信息', 'http://127.0.0.1:8001', '/users/1239192312/tickets/1/', 'get', '', '\"status\": \"error\"', '', \" {\\n   \\n   'Accept': '*/*',\\n   'Host': '127.0.0.1:8001',\\n   'Connection': 'keep-alive'\\n}\", '']"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["run(order=3)"]},"source":"4aaed390e3c52f39.json","parameterValues":["[1.0, '查询不存在用户的门票详细信息', 'http://127.0.0.1:8001', '/users/1239192312/tickets/1/', 'get', '', '\"status\": \"error\"', '', \" {\\n   \\n   'Accept': '*/*',\\n   'Host': '127.0.0.1:8001',\\n   'Connection': 'keep-alive'\\n}\", '']"]}